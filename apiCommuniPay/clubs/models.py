from django.conf import settings
from django.db import models
from django.core.exceptions import ValidationError
from apiCommuniPay.projects.models import Project
from apiCommuniPay.common.models import TelegramChat

User = settings.AUTH_USER_MODEL

class Club(models.Model):
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="owned_clubs")
    managers = models.ManyToManyField(User, blank=True, related_name="managed_clubs")
    name = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["-created_at"]

    def __str__(self):
        return self.name

class Plan(models.Model):
    project = models.ForeignKey(Project, related_name="plans", on_delete=models.CASCADE)
    name = models.CharField(max_length=120)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    # üëá –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ñ–ª–∞–≥ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏)
    is_public = models.BooleanField(default=True, db_index=True)

    # –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–≤—è–∑–∫–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –æ—Å—Ç–∞—ë—Ç—Å—è
    channels = models.ManyToManyField(
        TelegramChat, through="PlanChannel", related_name="plans", blank=True
    )

    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name} ({self.project_id})"

class PlanChannel(models.Model):
    plan = models.ForeignKey(Plan, on_delete=models.CASCADE, related_name='plan_channels')
    chat = models.ForeignKey(TelegramChat, on_delete=models.CASCADE, related_name='chat_plans')

    class Meta:
        unique_together = [('plan', 'chat')]

    def clean(self):
        # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞ –∫ –ø–ª–∞–Ω—É –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if self.plan.project_id != self.chat.project_id:
            raise ValidationError("–ü–ª–∞–Ω –∏ —á–∞—Ç –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")

# –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Subscription, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ Plan
class Subscription(models.Model):
    user = models.ForeignKey('accounts.User', on_delete=models.CASCADE, related_name='subscriptions')
    plan = models.ForeignKey(Plan, on_delete=models.PROTECT, related_name='subscriptions')
    status = models.CharField(max_length=16, default='active')  # active / expired / canceled
    starts_at = models.DateTimeField(auto_now_add=True)
    ends_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        indexes = [
            models.Index(fields=['user', 'status']),
        ]

